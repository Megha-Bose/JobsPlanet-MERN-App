{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nvar propTypes = {\n  /**\n   * Specify whether the feedback is for valid or invalid fields\n   *\n   * @type {('valid'|'invalid')}\n   */\n  type: PropTypes.string,\n\n  /** Display feedback as a tooltip. */\n  tooltip: PropTypes.bool,\n  as: PropTypes.elementType\n};\nvar Feedback =\n/*#__PURE__*/\nReact.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\nfunction (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'valid' : _ref$type,\n      _ref$tooltip = _ref.tooltip,\n      tooltip = _ref$tooltip === void 0 ? false : _ref$tooltip,\n      props = _objectWithoutPropertiesLoose(_ref, [\"as\", \"className\", \"type\", \"tooltip\"]);\n\n  return (\n    /*#__PURE__*/\n    React.createElement(Component, _extends({}, props, {\n      ref: ref,\n      className: classNames(className, type + \"-\" + (tooltip ? 'tooltip' : 'feedback'))\n    }))\n  );\n});\nFeedback.displayName = 'Feedback';\nFeedback.propTypes = propTypes;\nexport default Feedback;","map":{"version":3,"sources":["/home/megha/mernapp/frontend/node_modules/react-bootstrap/esm/Feedback.js"],"names":["_extends","_objectWithoutPropertiesLoose","classNames","React","PropTypes","propTypes","type","string","tooltip","bool","as","elementType","Feedback","forwardRef","_ref","ref","_ref$as","Component","className","_ref$type","_ref$tooltip","props","createElement","displayName"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,IAAIC,SAAS,GAAG;AACd;;;;;AAKAC,EAAAA,IAAI,EAAEF,SAAS,CAACG,MANF;;AAQd;AACAC,EAAAA,OAAO,EAAEJ,SAAS,CAACK,IATL;AAUdC,EAAAA,EAAE,EAAEN,SAAS,CAACO;AAVA,CAAhB;AAYA,IAAIC,QAAQ;AAAG;AAAaT,KAAK,CAACU,UAAN,EAAkB;AAC9C,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AACnB,MAAIC,OAAO,GAAGF,IAAI,CAACJ,EAAnB;AAAA,MACIO,SAAS,GAAGD,OAAO,KAAK,KAAK,CAAjB,GAAqB,KAArB,GAA6BA,OAD7C;AAAA,MAEIE,SAAS,GAAGJ,IAAI,CAACI,SAFrB;AAAA,MAGIC,SAAS,GAAGL,IAAI,CAACR,IAHrB;AAAA,MAIIA,IAAI,GAAGa,SAAS,KAAK,KAAK,CAAnB,GAAuB,OAAvB,GAAiCA,SAJ5C;AAAA,MAKIC,YAAY,GAAGN,IAAI,CAACN,OALxB;AAAA,MAMIA,OAAO,GAAGY,YAAY,KAAK,KAAK,CAAtB,GAA0B,KAA1B,GAAkCA,YANhD;AAAA,MAOIC,KAAK,GAAGpB,6BAA6B,CAACa,IAAD,EAAO,CAAC,IAAD,EAAO,WAAP,EAAoB,MAApB,EAA4B,SAA5B,CAAP,CAPzC;;AASA;AAAO;AAAaX,IAAAA,KAAK,CAACmB,aAAN,CAAoBL,SAApB,EAA+BjB,QAAQ,CAAC,EAAD,EAAKqB,KAAL,EAAY;AACrEN,MAAAA,GAAG,EAAEA,GADgE;AAErEG,MAAAA,SAAS,EAAEhB,UAAU,CAACgB,SAAD,EAAYZ,IAAI,GAAG,GAAP,IAAcE,OAAO,GAAG,SAAH,GAAe,UAApC,CAAZ;AAFgD,KAAZ,CAAvC;AAApB;AAID,CAf2B,CAA5B;AAgBAI,QAAQ,CAACW,WAAT,GAAuB,UAAvB;AACAX,QAAQ,CAACP,SAAT,GAAqBA,SAArB;AACA,eAAeO,QAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nvar propTypes = {\n  /**\n   * Specify whether the feedback is for valid or invalid fields\n   *\n   * @type {('valid'|'invalid')}\n   */\n  type: PropTypes.string,\n\n  /** Display feedback as a tooltip. */\n  tooltip: PropTypes.bool,\n  as: PropTypes.elementType\n};\nvar Feedback = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\nfunction (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'valid' : _ref$type,\n      _ref$tooltip = _ref.tooltip,\n      tooltip = _ref$tooltip === void 0 ? false : _ref$tooltip,\n      props = _objectWithoutPropertiesLoose(_ref, [\"as\", \"className\", \"type\", \"tooltip\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n    ref: ref,\n    className: classNames(className, type + \"-\" + (tooltip ? 'tooltip' : 'feedback'))\n  }));\n});\nFeedback.displayName = 'Feedback';\nFeedback.propTypes = propTypes;\nexport default Feedback;"]},"metadata":{},"sourceType":"module"}