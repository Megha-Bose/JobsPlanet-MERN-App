{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"http://localhost:4000/user/register\", userData).then(res => alert(\"User registered successfully!\"), history.push(\"/login\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"http://localhost:4000/user/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Register User\n\nexport const editUserDetails = (id, userData, history) => dispatch => {\n  axios.put('http://localhost:4000/user/edit_profile/' + id, userData).then(response => {\n    console.log(\"User details edited successfully !\");\n    history.push(\"/profile\");\n  }).catch(function (error) {\n    console.log(\"lalala\");\n    console.log(error);\n  }); // .catch(err =>\n  //     dispatch({\n  //         type: GET_ERRORS,\n  //         payload: err.response.data\n  //     })\n  // );\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/home/megha/mernapp/frontend/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","alert","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","editUserDetails","id","put","console","log","error","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SACIC,UADJ,EAEIC,gBAFJ,EAGIC,YAHJ,QAIO,SAJP,C,CAMA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC3DT,EAAAA,KAAK,CACAU,IADL,CACU,qCADV,EACiDH,QADjD,EAEKI,IAFL,CAEUC,GAAG,IAAIC,KAAK,CAAC,+BAAD,CAFtB,EAEwDL,OAAO,CAACM,IAAR,CAAa,QAAb,CAFxD,EAEgF;AAFhF,GAGKC,KAHL,CAGWC,GAAG,IACNP,QAAQ,CAAC;AACLQ,IAAAA,IAAI,EAAEd,UADD;AAELe,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,GAAD,CAJhB;AASH,CAVM,C,CAYP;;AACA,OAAO,MAAMC,SAAS,GAAGd,QAAQ,IAAIE,QAAQ,IAAI;AAC7CT,EAAAA,KAAK,CACJU,IADD,CACM,kCADN,EAC0CH,QAD1C,EAECI,IAFD,CAEMC,GAAG,IAAI;AACT;AACA;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAYV,GAAG,CAACQ,IAAtB;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJS,CAKT;;AACArB,IAAAA,YAAY,CAACqB,KAAD,CAAZ,CANS,CAOT;;AACA,UAAMG,OAAO,GAAGvB,UAAU,CAACoB,KAAD,CAA1B,CARS,CAST;;AACAb,IAAAA,QAAQ,CAACiB,cAAc,CAACD,OAAD,CAAf,CAAR;AACH,GAbD,EAcCV,KAdD,CAcOC,GAAG,IACFP,QAAQ,CAAC;AACTQ,IAAAA,IAAI,EAAEd,UADG;AAETe,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFb,GAAD,CAfhB;AAoBH,CArBM,C,CAuBP;;AACA,OAAO,MAAMO,eAAe,GAAG,CAACC,EAAD,EAAKrB,QAAL,EAAeC,OAAf,KAA2BC,QAAQ,IAAI;AAClET,EAAAA,KAAK,CACA6B,GADL,CACS,6CAA6CD,EADtD,EAC0DrB,QAD1D,EAEKI,IAFL,CAEUQ,QAAQ,IAAI;AACdW,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACAvB,IAAAA,OAAO,CAACM,IAAR,CAAa,UAAb;AACH,GALL,EAMKC,KANL,CAMW,UAASiB,KAAT,EAAgB;AACnBF,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH,GATL,EADkE,CAW9D;AACA;AACA;AACA;AACA;AACA;AACP,CAjBM,C,CAmBP;;AACA,OAAO,MAAMN,cAAc,GAAGD,OAAO,IAAI;AACrC,SAAO;AACHR,IAAAA,IAAI,EAAEb,gBADH;AAEHc,IAAAA,OAAO,EAAEO;AAFN,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAMQ,cAAc,GAAG,MAAM;AAChC,SAAO;AACHhB,IAAAA,IAAI,EAAEZ;AADH,GAAP;AAGH,CAJM,C,CAMP;;AACA,OAAO,MAAM6B,UAAU,GAAG,MAAMzB,QAAQ,IAAI;AACxC;AACAc,EAAAA,YAAY,CAACY,UAAb,CAAwB,UAAxB,EAFwC,CAGxC;;AACAlC,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJwC,CAKxC;;AACAQ,EAAAA,QAAQ,CAACiB,cAAc,CAAC,EAAD,CAAf,CAAR;AACH,CAPM","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n    GET_ERRORS,\n    SET_CURRENT_USER,\n    USER_LOADING\n} from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n    axios\n        .post(\"http://localhost:4000/user/register\", userData)\n        .then(res => alert(\"User registered successfully!\"),history.push(\"/login\")) // re-direct to login on successful register\n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n    );\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n    axios\n    .post(\"http://localhost:4000/user/login\", userData)\n    .then(res => {\n        // Save to localStorage\n        // Set token to localStorage\n        const { token } = res.data;\n        localStorage.setItem(\"jwtToken\", token);\n        // Set token to Auth header\n        setAuthToken(token);\n        // Decode token to get user data\n        const decoded = jwt_decode(token);\n        // Set current user\n        dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n            dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        })\n    );\n};\n\n// Register User\nexport const editUserDetails = (id, userData, history) => dispatch => {\n    axios\n        .put('http://localhost:4000/user/edit_profile/' + id, userData)\n        .then(response => {\n            console.log(\"User details edited successfully !\");\n            history.push(\"/profile\");\n        })\n        .catch(function(error) {\n            console.log(\"lalala\");\n            console.log(error);\n        })\n        // .catch(err =>\n        //     dispatch({\n        //         type: GET_ERRORS,\n        //         payload: err.response.data\n        //     })\n        // );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    };\n};\n\n// User loading\nexport const setUserLoading = () => {\n    return {\n        type: USER_LOADING\n    };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n    // Remove token from local storage\n    localStorage.removeItem(\"jwtToken\");\n    // Remove auth header for future requests\n    setAuthToken(false);\n    // Set current user to empty object {} which will set isAuthenticated to false\n    dispatch(setCurrentUser({}));\n};"]},"metadata":{},"sourceType":"module"}