{"ast":null,"code":"var _jsxFileName = \"/home/megha/mernapp/frontend/src/components/Applicant/JobsList.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport PropTypes from \"prop-types\";\nimport Card from \"react-bootstrap/Card\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../actions/authActions\";\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nclass JobsList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onLogoutClick = e => {\n      e.preventDefault();\n      this.props.logoutUser();\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.validate = () => {\n      let sopError = \"\";\n\n      if (this.state.address === \"\") {\n        sopError = \"SOP cannot have more than 250 words.\";\n      }\n\n      if (sopError) {\n        this.setState({\n          sopError\n        });\n        return false;\n      }\n\n      return true;\n    };\n\n    this.state = {\n      userdetails: [],\n      jobs: [],\n      sortedJobs: [],\n      applications: [],\n      sortName: true,\n      recruiterName: \"\",\n      enteredsop: \"\",\n      showPrompt: false,\n      sopError: \"\"\n    }; // this.renderIcon = this.renderIcon.bind(this);\n    // this.sortChange = this.sortChange.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      user\n    } = this.props.auth;\n    this.state.showPrompt = false;\n    axios.get('http://localhost:4000/user/' + user.id).then(response => {\n      this.setState({\n        userdetails: response.data\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n    axios.get('http://localhost:4000/job/get_jobs').then(response => {\n      this.setState({\n        jobs: response.data,\n        sortedJobs: response.data\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n    axios.get('http://localhost:4000/application/get_applications').then(response => {\n      this.setState({\n        applications: response.data\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  togglePrompt() {\n    this.state.showPrompt = !this.state.showPrompt;\n  }\n\n  applied(job) {\n    const {\n      user\n    } = this.props.auth;\n    let num = 0;\n    let arr = this.state.applications.filter(item => item.jobId === job._id && item.applicantId === user.id && (item.status !== \"Rejected\" || item.status != \"Accepted\"));\n    num = arr.length;\n    if (num > 0) return true;else return false;\n  }\n\n  apply(job) {\n    const {\n      user\n    } = this.props.auth;\n    const newApplication = {\n      jobId: job._id,\n      applicantId: user.id,\n      recruiterId: job.recruiter,\n      stage: 0,\n      status: \"Applied\",\n      sop: this.state.enteredsop\n    };\n    const isValid = this.validate();\n\n    if (isValid) {\n      axios.post('http://localhost:4000/application/add_application', newApplication).then(response => {\n        console.log(newApplication);\n        alert(\"Application sent successfully!\"); // to refresh\n\n        this.props.history.push(\"/jobsList\");\n        this.props.history.push(\"/jobsList\");\n        this.props.history.goBack();\n      }).catch(function (error) {\n        console.log(error);\n        alert(\"Applicantion could not be sent.\");\n      });\n      this.state.showPrompt = !this.state.showPrompt;\n      this.setState({\n        enteredsop: \"\"\n      });\n      this.props.history.push(\"/jobsList\");\n      this.props.history.push(\"/jobsList\");\n      this.props.history.goback();\n    }\n  } // sortChange(){\n  //     var array = this.state.users;\n  //     var flag = this.state.sortName;\n  //     array.sort(function(a, b) {\n  //         if(a.date != undefined && b.date != undefined){\n  //             return (1 - flag*2) * (new Date(a.date) - new Date(b.date));\n  //         }\n  //         else{\n  //             return 1;\n  //         }\n  //       });\n  //     this.setState({\n  //         users:array,\n  //         sortName:!this.state.sortName,\n  //     })\n  // }\n  // renderIcon(){\n  //     if(this.state.sortName){\n  //         return(\n  //             <ArrowDownwardIcon/>\n  //         )\n  //     }\n  //     else{\n  //         return(\n  //             <ArrowUpwardIcon/>\n  //         )            \n  //     }\n  // }\n\n\n  render() {\n    const userRole = this.state.userdetails.role;\n    let AllJobs;\n\n    if (userRole === \"applicant\") {\n      AllJobs = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        md: 3,\n        lg: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(List, {\n        component: \"nav\",\n        \"aria-label\": \"mailbox folders\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(ListItem, {\n        text: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"Active Jobs\"))))), React.createElement(Grid, {\n        container: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        md: 9,\n        lg: 9,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, React.createElement(Paper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, React.createElement(Table, {\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(TableHead, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, \"Title\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, \"Recruiter\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, \"Rating\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, \"Salary\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, \"Duration(months)\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, \"Deadline\"))), React.createElement(TableBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, this.state.jobs.filter(item => new Date().getTime() <= new Date(item.deadline.substring(0, 10)).getTime()).map((job, ind) => React.createElement(TableRow, {\n        key: ind,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, job.title), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, job.recruiterName), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, job.rating), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, job.salary), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, job.duration), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, job.deadline.substring(0, 10)), this.state.showPrompt ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, React.createElement(Modal, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        closeButton: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(Modal.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, \"Modal title\")), React.createElement(Modal.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"sop\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, \"Enter SOP:\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        onChange: this.onChange,\n        value: this.state.enteredsop,\n        id: \"sop\",\n        type: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: {\n          fontSize: 12,\n          color: \"red\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, this.state.sopError)), React.createElement(Modal.Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"secondary\",\n        onClick: () => this.togglePrompt(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, \"Close\"), React.createElement(Button, {\n        variant: \"primary\",\n        onClick: () => this.apply(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, \"Submit\")))) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }), !this.applied(job) ? React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        title: \"Apply for this job\",\n        \"aria-label\": \"apply\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-primary btn-sm waves-effect waves-light hoverable blue accent-3\",\n        onClick: () => this.togglePrompt(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, \"Apply\"))) : React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        title: \"Applied for this job\",\n        \"aria-label\": \"applied\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-secondary disabled btn-sm waves-effect waves-light hoverable blue accent-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      }, \"Applied\")))))))))));\n    }\n\n    return React.createElement(\"div\", {\n      style: {\n        height: \"75vh\"\n      },\n      className: \"container valign-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col s12 center-align\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, React.createElement(Card, {\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, AllJobs))))));\n  }\n\n}\n\nJobsList.propTypes = {\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps)(JobsList);","map":{"version":3,"sources":["/home/megha/mernapp/frontend/src/components/Applicant/JobsList.js"],"names":["React","Component","axios","Paper","Grid","TableCell","TableHead","TableRow","Table","TableBody","Button","TextField","List","Tooltip","ListItem","Divider","Autocomplete","IconButton","InputAdornment","SearchIcon","ArrowUpwardIcon","ArrowDownwardIcon","PropTypes","Card","connect","logoutUser","ButtonGroup","Dropdown","JobsList","constructor","props","onLogoutClick","e","preventDefault","onChange","setState","target","id","value","validate","sopError","state","address","userdetails","jobs","sortedJobs","applications","sortName","recruiterName","enteredsop","showPrompt","componentDidMount","user","auth","get","then","response","data","catch","error","console","log","componentWillReceiveProps","nextProps","errors","togglePrompt","applied","job","num","arr","filter","item","jobId","_id","applicantId","status","length","apply","newApplication","recruiterId","recruiter","stage","sop","isValid","post","alert","history","push","goBack","goback","render","userRole","role","AllJobs","Date","getTime","deadline","substring","map","ind","title","rating","salary","duration","fontSize","color","height","width","propTypes","object","isRequired","mapStateToProps"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\n\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\nimport PropTypes from \"prop-types\";\nimport Card from \"react-bootstrap/Card\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../actions/authActions\";\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\n\n\nclass JobsList extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            userdetails: [],\n            jobs: [],\n            sortedJobs: [], \n            applications: [],\n            sortName:true, \n            recruiterName: \"\",\n            enteredsop: \"\",\n            showPrompt: false,\n            sopError: \"\"\n        };\n        // this.renderIcon = this.renderIcon.bind(this);\n        // this.sortChange = this.sortChange.bind(this);\n    }\n\n    onLogoutClick = e => {\n        e.preventDefault();\n        this.props.logoutUser();\n    };\n\n    onChange = e => {\n        this.setState({ [e.target.id]: e.target.value });\n    };\n\n    componentDidMount() {\n        const { user } = this.props.auth;\n        this.state.showPrompt = false;\n        axios.get('http://localhost:4000/user/'+ user.id)\n                .then(response => {\n                    this.setState({userdetails: response.data});\n                })\n                .catch(function(error) {\n                    console.log(error);\n                })\n        axios.get('http://localhost:4000/job/get_jobs')\n            .then(response => {\n                this.setState({jobs: response.data, sortedJobs:response.data});\n            })\n            .catch(function(error) {\n                console.log(error);\n            })\n        axios.get('http://localhost:4000/application/get_applications')\n            .then(response => {\n                this.setState({applications: response.data});\n            })\n            .catch(function(error) {\n                console.log(error);\n            })\n    }\n\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n            this.setState({\n            errors: nextProps.errors\n            });\n        }\n    }\n\n    validate = () => {\n        let sopError = \"\";\n    \n        if (this.state.address === \"\") {\n            sopError = \"SOP cannot have more than 250 words.\";\n        }\n    \n        if (sopError) {\n            this.setState({ sopError });\n            return false;\n        }\n    \n        return true;\n    };\n\n    togglePrompt() {\n        this.state.showPrompt = !this.state.showPrompt;\n    }\n\n    applied(job) {\n        const { user } = this.props.auth;\n        let num = 0;\n        let arr = this.state.applications.filter(item => item.jobId === job._id && item.applicantId === user.id && (item.status !== \"Rejected\" || item.status != \"Accepted\"));\n        num = arr.length;\n        if(num>0) return true;\n        else return false;\n    }\n\n    apply(job)\n    {\n        const { user } = this.props.auth;\n        const newApplication = {\n            jobId: job._id,\n            applicantId: user.id,\n            recruiterId:job.recruiter,\n            stage: 0,\n            status: \"Applied\",\n            sop: this.state.enteredsop\n        };\n        const isValid = this.validate();\n        if (isValid) {\n            axios\n                .post('http://localhost:4000/application/add_application', newApplication)\n                .then(response => {\n                    console.log(newApplication);\n                    alert(\"Application sent successfully!\");\n                    // to refresh\n                    this.props.history.push(\"/jobsList\");\n                    this.props.history.push(\"/jobsList\");\n                    this.props.history.goBack();\n                })\n                .catch(function(error) {\n                    console.log(error);\n                    alert(\"Applicantion could not be sent.\");\n                })\n            this.state.showPrompt = !this.state.showPrompt;\n            this.setState({\n                enteredsop: \"\"\n            });\n            this.props.history.push(\"/jobsList\");\n            this.props.history.push(\"/jobsList\");\n            this.props.history.goback();\n        }\n    }\n\n    // sortChange(){\n    //     var array = this.state.users;\n    //     var flag = this.state.sortName;\n    //     array.sort(function(a, b) {\n    //         if(a.date != undefined && b.date != undefined){\n    //             return (1 - flag*2) * (new Date(a.date) - new Date(b.date));\n    //         }\n    //         else{\n    //             return 1;\n    //         }\n    //       });\n    //     this.setState({\n    //         users:array,\n    //         sortName:!this.state.sortName,\n    //     })\n    // }\n\n    // renderIcon(){\n    //     if(this.state.sortName){\n    //         return(\n    //             <ArrowDownwardIcon/>\n    //         )\n    //     }\n    //     else{\n    //         return(\n    //             <ArrowUpwardIcon/>\n    //         )            \n    //     }\n    // }\n\n    render() \n    {\n        const userRole = this.state.userdetails.role;\n        let AllJobs;\n        if(userRole === \"applicant\") {\n            AllJobs =\n            <div>\n                <Grid container>\n                <Grid item xs={12} md={3} lg={3}>\n                    <List component=\"nav\" aria-label=\"mailbox folders\">\n                        <ListItem text>\n                            <h3>Active Jobs</h3>\n                        </ListItem>\n                    </List>\n                </Grid>\n                    {/* <Grid item xs={12} md={9} lg={9}>\n                    <List component=\"nav\" aria-label=\"mailbox folders\">\n                        <TextField \n                        id=\"standard-basic\" \n                        label=\"Search\" \n                        fullWidth={true}   \n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment>\n                                    <IconButton>\n                                        <SearchIcon />\n                                    </IconButton>\n                                </InputAdornment>\n                            )}}\n                        />\n                    </List>\n                    </Grid> */}\n                </Grid>\n                <Grid container>\n                    {/* <Grid item xs={12} md={3} lg={3}>\n                        <List component=\"nav\" aria-label=\"mailbox folders\">\n\n                            <ListItem button>\n                                <form noValidate autoComplete=\"off\">\n                                    <label>Salary</label>\n                                    <TextField id=\"standard-basic\" label=\"Enter Min\" fullWidth={true} />\n                                    <TextField id=\"standard-basic\" label=\"Enter Max\" fullWidth={true}/>\n                                </form>                                                                \n                            </ListItem>\n                            <Divider />\n                            <ListItem button divider>\n                                <Autocomplete\n                                    id=\"combo-box-demo\"\n                                    options={this.state.jobs}\n                                    getOptionLabel={(option) => option.name}\n                                    style={{ width: 300 }}\n                                    renderInput={(params) => <TextField {...params} label=\"Select Names\" variant=\"outlined\" />}\n                                />\n                            </ListItem>\n                        </List>\n                    </Grid> */}\n                    <Grid item xs={12} md={9} lg={9}>\n                        <Paper>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                            {/* <TableCell> <Button onClick={this.sortChange}>{this.renderIcon()}</Button>Date</TableCell> */}\n                                            <TableCell>Title</TableCell>\n                                            <TableCell>Recruiter</TableCell>\n                                            <TableCell>Rating</TableCell>\n                                            <TableCell>Salary</TableCell>\n                                            <TableCell>Duration(months)</TableCell>\n                                            <TableCell>Deadline</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {this.state.jobs.filter(item => (new Date()).getTime() <= (new Date(item.deadline.substring(0,10))).getTime()).map((job,ind) => (\n                                        <TableRow key={ind}>\n                                            <TableCell>{job.title}</TableCell>\n                                            <TableCell>{job.recruiterName}</TableCell>\n                                            <TableCell>{job.rating}</TableCell>\n                                            <TableCell>{job.salary}</TableCell>\n                                            <TableCell>{job.duration}</TableCell>\n                                            <TableCell>{job.deadline.substring(0,10)}</TableCell>\n                                            {this.state.showPrompt? \n                                                <div>\n                                                    <Modal>\n                                                        <Modal.Header closeButton>\n                                                        <Modal.Title>Modal title</Modal.Title>\n                                                        </Modal.Header>\n                                                        <Modal.Body>\n                                                        \n                                                            <label htmlFor=\"sop\">Enter SOP:</label><br></br>\n                                                            <input\n                                                                onChange={this.onChange}\n                                                                value={this.state.enteredsop}\n                                                                id=\"sop\"\n                                                                type=\"text\"\n                                                            />\n                                                            <div style={{ fontSize: 12, color: \"red\" }}>\n                                                                {this.state.sopError}\n                                                            </div>\n                                                        \n                                                        </Modal.Body>\n                                                        <Modal.Footer>\n                                                        <Button variant=\"secondary\" onClick={() => this.togglePrompt()}>\n                                                            Close\n                                                        </Button>\n                                                        <Button variant=\"primary\" onClick={() => this.apply()}>Submit</Button>\n                                                        </Modal.Footer>\n                                                    </Modal>\n                                                </div>\n                                            : \n                                                <div></div>\n                                            }\n                                            {!this.applied(job)?\n                                            \n                                            <TableCell>\n                                                <Tooltip title=\"Apply for this job\" aria-label=\"apply\">\n                                                    <button\n                                                        className=\"btn btn-primary btn-sm waves-effect waves-light hoverable blue accent-3\" \n                                                        onClick={() => this.togglePrompt()}>\n                                                        Apply\n                                                    </button> \n                                                </Tooltip>                                            \n                                            </TableCell>\n\n                                            :\n\n                                            <TableCell>\n                                                <Tooltip title=\"Applied for this job\" aria-label=\"applied\">\n                                                    <button\n                                                        className=\"btn btn-secondary disabled btn-sm waves-effect waves-light hoverable blue accent-3\">\n                                                        Applied\n                                                    </button> \n                                                </Tooltip>                                            \n                                            </TableCell>\n\n                                            }\n                                            \n                                        </TableRow> \n                                ))}\n                                </TableBody>\n                            </Table>\n                        </Paper>               \n                    </Grid>    \n                </Grid>            \n            </div>\n        }\n        return (\n            <div style={{ height: \"75vh\" }} className=\"container valign-wrapper\">\n                <div className=\"row\">\n                    <div className=\"col s12 center-align\">\n                        <Card style={{ width: '100%' }}>\n                            <Card.Body>\n                                <Card.Text>\n                                    {AllJobs}\n                                </Card.Text>\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nJobsList.propTypes = {\n    auth: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    errors: state.errors\n});\nexport default connect(\n    mapStateToProps,\n)(JobsList);"]},"metadata":{},"sourceType":"module"}