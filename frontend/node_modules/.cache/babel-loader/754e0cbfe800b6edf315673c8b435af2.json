{"ast":null,"code":"import { useReducer, useRef, useMemo, useContext, useDebugValue } from 'react';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport Subscription from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\nimport { ReactReduxContext } from '../components/Context';\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n  var _useReducer = useReducer(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = useMemo(function () {\n    return new Subscription(store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef();\n  var latestStoreState = useRef();\n  var latestSelectedState = useRef();\n  var storeState = store.getState();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(storeState);\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current) {\n      err.message += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\n\";\n    }\n\n    throw err;\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestStoreState.current = storeState;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender();\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}\n/**\n * Hook factory, which creates a `useSelector` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useSelector` hook bound to the specified context.\n */\n\n\nexport function createSelectorHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : function () {\n    return useContext(context);\n  };\n  return function useSelector(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = refEquality;\n    }\n\n    if (process.env.NODE_ENV !== 'production' && !selector) {\n      throw new Error(\"You must pass a selector to useSelector\");\n    }\n\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store,\n        contextSub = _useReduxContext.subscription;\n\n    var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n    useDebugValue(selectedState);\n    return selectedState;\n  };\n}\n/**\n * A hook to access the redux store's state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param {Function} selector the selector function\n * @param {Function=} equalityFn the function that will be used to determine equality\n *\n * @returns {any} the selected state\n *\n * @example\n *\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const counter = useSelector(state => state.counter)\n *   return <div>{counter}</div>\n * }\n */\n\nexport var useSelector =\n/*#__PURE__*/\ncreateSelectorHook();","map":{"version":3,"sources":["/home/megha/mernapp/frontend/node_modules/react-redux/es/hooks/useSelector.js"],"names":["useReducer","useRef","useMemo","useContext","useDebugValue","useReduxContext","useDefaultReduxContext","Subscription","useIsomorphicLayoutEffect","ReactReduxContext","refEquality","a","b","useSelectorWithStoreAndSubscription","selector","equalityFn","store","contextSub","_useReducer","s","forceRender","subscription","latestSubscriptionCallbackError","latestSelector","latestStoreState","latestSelectedState","storeState","getState","selectedState","current","err","message","stack","undefined","checkForUpdates","newSelectedState","onStateChange","trySubscribe","tryUnsubscribe","createSelectorHook","context","useSelector","process","env","NODE_ENV","Error","_useReduxContext"],"mappings":"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","sourcesContent":["import { useReducer, useRef, useMemo, useContext, useDebugValue } from 'react';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport Subscription from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\nimport { ReactReduxContext } from '../components/Context';\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n  var _useReducer = useReducer(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = useMemo(function () {\n    return new Subscription(store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef();\n  var latestStoreState = useRef();\n  var latestSelectedState = useRef();\n  var storeState = store.getState();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(storeState);\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current) {\n      err.message += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\n\";\n    }\n\n    throw err;\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestStoreState.current = storeState;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender();\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}\n/**\n * Hook factory, which creates a `useSelector` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useSelector` hook bound to the specified context.\n */\n\n\nexport function createSelectorHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : function () {\n    return useContext(context);\n  };\n  return function useSelector(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = refEquality;\n    }\n\n    if (process.env.NODE_ENV !== 'production' && !selector) {\n      throw new Error(\"You must pass a selector to useSelector\");\n    }\n\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store,\n        contextSub = _useReduxContext.subscription;\n\n    var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n    useDebugValue(selectedState);\n    return selectedState;\n  };\n}\n/**\n * A hook to access the redux store's state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param {Function} selector the selector function\n * @param {Function=} equalityFn the function that will be used to determine equality\n *\n * @returns {any} the selected state\n *\n * @example\n *\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const counter = useSelector(state => state.counter)\n *   return <div>{counter}</div>\n * }\n */\n\nexport var useSelector = /*#__PURE__*/createSelectorHook();"]},"metadata":{},"sourceType":"module"}