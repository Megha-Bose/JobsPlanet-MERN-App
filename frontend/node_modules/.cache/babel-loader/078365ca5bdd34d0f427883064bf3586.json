{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nimport { alignPropType } from './DropdownMenu';\nvar propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */\n  toggleLabel: PropTypes.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu responsively.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"left\"|\"right\"|{ sm: \"left\"|\"right\" }|{ md: \"left\"|\"right\" }|{ lg: \"left\"|\"right\" }|{ xl: \"left\"|\"right\"} }\n   */\n  menuAlign: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\nvar defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\n/**\n * A convenience component for simple or general use split button dropdowns. Renders a\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\n * props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\n * and menu-related props are passed to the `Dropdown.Menu`\n */\n\nvar SplitButton =\n/*#__PURE__*/\nReact.forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n      bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      variant = _ref.variant,\n      title = _ref.title,\n      type = _ref.type,\n      toggleLabel = _ref.toggleLabel,\n      children = _ref.children,\n      onClick = _ref.onClick,\n      href = _ref.href,\n      target = _ref.target,\n      menuAlign = _ref.menuAlign,\n      menuRole = _ref.menuRole,\n      renderMenuOnMount = _ref.renderMenuOnMount,\n      rootCloseEvent = _ref.rootCloseEvent,\n      props = _objectWithoutPropertiesLoose(_ref, [\"id\", \"bsPrefix\", \"size\", \"variant\", \"title\", \"type\", \"toggleLabel\", \"children\", \"onClick\", \"href\", \"target\", \"menuAlign\", \"menuRole\", \"renderMenuOnMount\", \"rootCloseEvent\"]);\n\n  return (\n    /*#__PURE__*/\n    React.createElement(Dropdown, _extends({\n      ref: ref\n    }, props, {\n      as: ButtonGroup\n    }),\n    /*#__PURE__*/\n    React.createElement(Button, {\n      size: size,\n      variant: variant,\n      disabled: props.disabled,\n      bsPrefix: bsPrefix,\n      href: href,\n      target: target,\n      onClick: onClick,\n      type: type\n    }, title),\n    /*#__PURE__*/\n    React.createElement(Dropdown.Toggle, {\n      split: true,\n      id: id ? id.toString() : undefined,\n      size: size,\n      variant: variant,\n      disabled: props.disabled,\n      childBsPrefix: bsPrefix\n    },\n    /*#__PURE__*/\n    React.createElement(\"span\", {\n      className: \"sr-only\"\n    }, toggleLabel)),\n    /*#__PURE__*/\n    React.createElement(Dropdown.Menu, {\n      align: menuAlign,\n      role: menuRole,\n      renderOnMount: renderMenuOnMount,\n      rootCloseEvent: rootCloseEvent\n    }, children))\n  );\n});\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;","map":{"version":3,"sources":["/home/megha/mernapp/frontend/node_modules/react-bootstrap/esm/SplitButton.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","Button","ButtonGroup","Dropdown","alignPropType","propTypes","id","any","toggleLabel","string","href","target","onClick","func","title","node","isRequired","type","disabled","bool","menuAlign","menuRole","renderMenuOnMount","rootCloseEvent","bsPrefix","variant","size","defaultProps","SplitButton","forwardRef","_ref","ref","children","props","createElement","as","Toggle","split","toString","undefined","childBsPrefix","className","Menu","align","role","renderOnMount","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nimport { alignPropType } from './DropdownMenu';\nvar propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */\n  toggleLabel: PropTypes.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu responsively.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"left\"|\"right\"|{ sm: \"left\"|\"right\" }|{ md: \"left\"|\"right\" }|{ lg: \"left\"|\"right\" }|{ xl: \"left\"|\"right\"} }\n   */\n  menuAlign: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\nvar defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\n/**\n * A convenience component for simple or general use split button dropdowns. Renders a\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\n * props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\n * and menu-related props are passed to the `Dropdown.Menu`\n */\n\nvar SplitButton = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n      bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      variant = _ref.variant,\n      title = _ref.title,\n      type = _ref.type,\n      toggleLabel = _ref.toggleLabel,\n      children = _ref.children,\n      onClick = _ref.onClick,\n      href = _ref.href,\n      target = _ref.target,\n      menuAlign = _ref.menuAlign,\n      menuRole = _ref.menuRole,\n      renderMenuOnMount = _ref.renderMenuOnMount,\n      rootCloseEvent = _ref.rootCloseEvent,\n      props = _objectWithoutPropertiesLoose(_ref, [\"id\", \"bsPrefix\", \"size\", \"variant\", \"title\", \"type\", \"toggleLabel\", \"children\", \"onClick\", \"href\", \"target\", \"menuAlign\", \"menuRole\", \"renderMenuOnMount\", \"rootCloseEvent\"]);\n\n  return /*#__PURE__*/React.createElement(Dropdown, _extends({\n    ref: ref\n  }, props, {\n    as: ButtonGroup\n  }), /*#__PURE__*/React.createElement(Button, {\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    bsPrefix: bsPrefix,\n    href: href,\n    target: target,\n    onClick: onClick,\n    type: type\n  }, title), /*#__PURE__*/React.createElement(Dropdown.Toggle, {\n    split: true,\n    id: id ? id.toString() : undefined,\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    childBsPrefix: bsPrefix\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, toggleLabel)), /*#__PURE__*/React.createElement(Dropdown.Menu, {\n    align: menuAlign,\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent\n  }, children));\n});\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;"]},"metadata":{},"sourceType":"module"}