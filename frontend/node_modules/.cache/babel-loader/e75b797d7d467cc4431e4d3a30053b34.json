{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport isRequiredForA11y from 'prop-types-extra/lib/isRequiredForA11y';\nimport React from 'react';\nimport { useDropdownToggle } from 'react-overlays/DropdownToggle';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport Button from './Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport useWrappedRefWithWarning from './useWrappedRefWithWarning';\nvar DropdownToggle =\n/*#__PURE__*/\nReact.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      split = _ref.split,\n      className = _ref.className,\n      childBsPrefix = _ref.childBsPrefix,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? Button : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"split\", \"className\", \"childBsPrefix\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'dropdown-toggle');\n\n  if (childBsPrefix !== undefined) {\n    props.bsPrefix = childBsPrefix;\n  }\n\n  var _useDropdownToggle = useDropdownToggle(),\n      toggleProps = _useDropdownToggle[0],\n      toggle = _useDropdownToggle[1].toggle;\n\n  toggleProps.ref = useMergedRefs(toggleProps.ref, useWrappedRefWithWarning(ref, 'DropdownToggle')); // This intentionally forwards size and variant (if set) to the\n  // underlying component, to allow it to render size and style variants.\n\n  return (\n    /*#__PURE__*/\n    React.createElement(Component, _extends({\n      onClick: toggle,\n      className: classNames(className, prefix, split && prefix + \"-split\")\n    }, toggleProps, props))\n  );\n});\nDropdownToggle.displayName = 'DropdownToggle';\nexport default DropdownToggle;","map":{"version":3,"sources":["/home/megha/mernapp/frontend/node_modules/react-bootstrap/esm/DropdownToggle.js"],"names":["_extends","_objectWithoutPropertiesLoose","classNames","isRequiredForA11y","React","useDropdownToggle","useMergedRefs","Button","useBootstrapPrefix","useWrappedRefWithWarning","DropdownToggle","forwardRef","_ref","ref","bsPrefix","split","className","childBsPrefix","_ref$as","as","Component","props","prefix","undefined","_useDropdownToggle","toggleProps","toggle","createElement","onClick","displayName"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,iBAAP,MAA8B,wCAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,IAAIC,cAAc;AAAG;AAAaN,KAAK,CAACO,UAAN,CAAiB,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AACtE,MAAIC,QAAQ,GAAGF,IAAI,CAACE,QAApB;AAAA,MACIC,KAAK,GAAGH,IAAI,CAACG,KADjB;AAAA,MAEIC,SAAS,GAAGJ,IAAI,CAACI,SAFrB;AAAA,MAGIC,aAAa,GAAGL,IAAI,CAACK,aAHzB;AAAA,MAIIC,OAAO,GAAGN,IAAI,CAACO,EAJnB;AAAA,MAKIC,SAAS,GAAGF,OAAO,KAAK,KAAK,CAAjB,GAAqBX,MAArB,GAA8BW,OAL9C;AAAA,MAMIG,KAAK,GAAGpB,6BAA6B,CAACW,IAAD,EAAO,CAAC,UAAD,EAAa,OAAb,EAAsB,WAAtB,EAAmC,eAAnC,EAAoD,IAApD,CAAP,CANzC;;AAQA,MAAIU,MAAM,GAAGd,kBAAkB,CAACM,QAAD,EAAW,iBAAX,CAA/B;;AAEA,MAAIG,aAAa,KAAKM,SAAtB,EAAiC;AAC/BF,IAAAA,KAAK,CAACP,QAAN,GAAiBG,aAAjB;AACD;;AAED,MAAIO,kBAAkB,GAAGnB,iBAAiB,EAA1C;AAAA,MACIoB,WAAW,GAAGD,kBAAkB,CAAC,CAAD,CADpC;AAAA,MAEIE,MAAM,GAAGF,kBAAkB,CAAC,CAAD,CAAlB,CAAsBE,MAFnC;;AAIAD,EAAAA,WAAW,CAACZ,GAAZ,GAAkBP,aAAa,CAACmB,WAAW,CAACZ,GAAb,EAAkBJ,wBAAwB,CAACI,GAAD,EAAM,gBAAN,CAA1C,CAA/B,CAnBsE,CAmB6B;AACnG;;AAEA;AAAO;AAAaT,IAAAA,KAAK,CAACuB,aAAN,CAAoBP,SAApB,EAA+BpB,QAAQ,CAAC;AAC1D4B,MAAAA,OAAO,EAAEF,MADiD;AAE1DV,MAAAA,SAAS,EAAEd,UAAU,CAACc,SAAD,EAAYM,MAAZ,EAAoBP,KAAK,IAAIO,MAAM,GAAG,QAAtC;AAFqC,KAAD,EAGxDG,WAHwD,EAG3CJ,KAH2C,CAAvC;AAApB;AAID,CA1BiC,CAAlC;AA2BAX,cAAc,CAACmB,WAAf,GAA6B,gBAA7B;AACA,eAAenB,cAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport isRequiredForA11y from 'prop-types-extra/lib/isRequiredForA11y';\nimport React from 'react';\nimport { useDropdownToggle } from 'react-overlays/DropdownToggle';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport Button from './Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport useWrappedRefWithWarning from './useWrappedRefWithWarning';\nvar DropdownToggle = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      split = _ref.split,\n      className = _ref.className,\n      childBsPrefix = _ref.childBsPrefix,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? Button : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"split\", \"className\", \"childBsPrefix\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'dropdown-toggle');\n\n  if (childBsPrefix !== undefined) {\n    props.bsPrefix = childBsPrefix;\n  }\n\n  var _useDropdownToggle = useDropdownToggle(),\n      toggleProps = _useDropdownToggle[0],\n      toggle = _useDropdownToggle[1].toggle;\n\n  toggleProps.ref = useMergedRefs(toggleProps.ref, useWrappedRefWithWarning(ref, 'DropdownToggle')); // This intentionally forwards size and variant (if set) to the\n  // underlying component, to allow it to render size and style variants.\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    onClick: toggle,\n    className: classNames(className, prefix, split && prefix + \"-split\")\n  }, toggleProps, props));\n});\nDropdownToggle.displayName = 'DropdownToggle';\nexport default DropdownToggle;"]},"metadata":{},"sourceType":"module"}