{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport NavItem from './NavItem';\nimport NavLink from './NavLink';\nvar propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables the toggle NavLink  */\n  disabled: PropTypes.bool,\n\n  /** Style the toggle NavLink as active  */\n  active: PropTypes.bool,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string\n};\nvar NavDropdown =\n/*#__PURE__*/\nReact.forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n      title = _ref.title,\n      children = _ref.children,\n      bsPrefix = _ref.bsPrefix,\n      rootCloseEvent = _ref.rootCloseEvent,\n      menuRole = _ref.menuRole,\n      disabled = _ref.disabled,\n      active = _ref.active,\n      renderMenuOnMount = _ref.renderMenuOnMount,\n      props = _objectWithoutPropertiesLoose(_ref, [\"id\", \"title\", \"children\", \"bsPrefix\", \"rootCloseEvent\", \"menuRole\", \"disabled\", \"active\", \"renderMenuOnMount\"]);\n\n  return (\n    /*#__PURE__*/\n    React.createElement(Dropdown, _extends({\n      ref: ref\n    }, props, {\n      as: NavItem\n    }),\n    /*#__PURE__*/\n    React.createElement(Dropdown.Toggle, {\n      id: id,\n      eventKey: null,\n      active: active,\n      disabled: disabled,\n      childBsPrefix: bsPrefix,\n      as: NavLink\n    }, title),\n    /*#__PURE__*/\n    React.createElement(Dropdown.Menu, {\n      role: menuRole,\n      renderOnMount: renderMenuOnMount,\n      rootCloseEvent: rootCloseEvent\n    }, children))\n  );\n});\nNavDropdown.displayName = 'NavDropdown';\nNavDropdown.propTypes = propTypes;\nNavDropdown.Item = Dropdown.Item;\nNavDropdown.ItemText = Dropdown.ItemText;\nNavDropdown.Divider = Dropdown.Divider;\nNavDropdown.Header = Dropdown.Header;\nexport default NavDropdown;","map":{"version":3,"sources":["/home/megha/mernapp/frontend/node_modules/react-bootstrap/esm/NavDropdown.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","Dropdown","NavItem","NavLink","propTypes","id","any","onClick","func","title","node","isRequired","disabled","bool","active","menuRole","string","renderMenuOnMount","rootCloseEvent","bsPrefix","NavDropdown","forwardRef","_ref","ref","children","props","createElement","as","Toggle","eventKey","childBsPrefix","Menu","role","renderOnMount","displayName","Item","ItemText","Divider","Header"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport NavItem from './NavItem';\nimport NavLink from './NavLink';\nvar propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables the toggle NavLink  */\n  disabled: PropTypes.bool,\n\n  /** Style the toggle NavLink as active  */\n  active: PropTypes.bool,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string\n};\nvar NavDropdown = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n      title = _ref.title,\n      children = _ref.children,\n      bsPrefix = _ref.bsPrefix,\n      rootCloseEvent = _ref.rootCloseEvent,\n      menuRole = _ref.menuRole,\n      disabled = _ref.disabled,\n      active = _ref.active,\n      renderMenuOnMount = _ref.renderMenuOnMount,\n      props = _objectWithoutPropertiesLoose(_ref, [\"id\", \"title\", \"children\", \"bsPrefix\", \"rootCloseEvent\", \"menuRole\", \"disabled\", \"active\", \"renderMenuOnMount\"]);\n\n  return /*#__PURE__*/React.createElement(Dropdown, _extends({\n    ref: ref\n  }, props, {\n    as: NavItem\n  }), /*#__PURE__*/React.createElement(Dropdown.Toggle, {\n    id: id,\n    eventKey: null,\n    active: active,\n    disabled: disabled,\n    childBsPrefix: bsPrefix,\n    as: NavLink\n  }, title), /*#__PURE__*/React.createElement(Dropdown.Menu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent\n  }, children));\n});\nNavDropdown.displayName = 'NavDropdown';\nNavDropdown.propTypes = propTypes;\nNavDropdown.Item = Dropdown.Item;\nNavDropdown.ItemText = Dropdown.ItemText;\nNavDropdown.Divider = Dropdown.Divider;\nNavDropdown.Header = Dropdown.Header;\nexport default NavDropdown;"]},"metadata":{},"sourceType":"module"}